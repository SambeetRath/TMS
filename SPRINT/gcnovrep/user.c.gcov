        -:    0:Source:user.c
        -:    1:#include <menu.h>
        -:    2:#include <user.h>
        -:    3:
        -:    4:
function create_user called 2 returned 100% blocks executed 92%
        2:    5:void create_user(int n)
        -:    6:{
        -:    7:	user *u;
        2:    8: 	u=(user*)calloc(n, sizeof(user));
        2:    9:    	FILE* fp = fopen(ucsv, appenddat);
call    0 returned 100%
        -:   10: 	int j;
        2:   11:    	if (fp==NULL) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   12:    	{
        -:   13:        	/* Error in file opening */
    #####:   14:        	printf("Can't open file\n");
call    0 never executed
    #####:   15:        	exit(EXIT_FAILURE);
call    0 never executed
        -:   16:    	}
        -:   17:    	else 
        -:   18:    	{       
        4:   19:    		for(j=0;j<n;j++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   20:    		{
        2:   21:			printf("\n");
call    0 returned 100%
        2:   22:			printf("\nEnter USER ID\n");
call    0 returned 100%
        2:   23:		    	(void)scanf("%d", &u[j].user_id);
call    0 returned 100%
        -:   24:		    
        2:   25:		    	printf("\nEnter USER Name\n");
call    0 returned 100%
        2:   26:		    	(void)scanf("%s", u[j].user_name);
call    0 returned 100%
        -:   27:		    
        2:   28:			printf("\nEnter USER DESIGNATION\n");
call    0 returned 100%
        2:   29:		    	(void)scanf("%s", u[j].designation);
call    0 returned 100%
        -:   30:		    
        -:   31:		 
        -:   32:		    	/* Saving data in file */
        2:   33:		    	int un=1;
        -:   34:		    	
        -:   35:		    	
        2:   36:				if(isupper(u[j].user_name[0])==0 && isupper(u[j].user_name[sizeof(u[j].user_name)])==0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   37:				{
        1:   38:					un=0;
        -:   39:				}
        -:   40:				    
        2:   41:		    	if(u[j].user_id<10000 && u[j].user_id>999 && un==1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:   42:		    	{
        1:   43:		    		fprintf(fp, "%d,%s,%s\n", u[j].user_id, u[j].user_name,u[j].designation );
call    0 returned 100%
        1:   44:		    		printf("\nNew USER added to record");
call    0 returned 100%
        -:   45:		    	}
        -:   46:		    	else
        1:   47:		    	printf("User info invalid");
call    0 returned 100%
        -:   48:		    }	
        -:   49:		    	/* Close the file */
        2:   50:		(void)fclose(fp);
call    0 returned 100%
        -:   51:		
        -:   52:    	}
        2:   53:    	printf("\nUSER TABLE SUCCESSFULLY CREATED\n");
call    0 returned 100%
        2:   54:    	free(u);
        2:   55:}
        -:   56:
function read_user called 3 returned 100% blocks executed 87%
        3:   57:void read_user()
        -:   58:{
        -:   59:
        3:   60:	FILE* fp = fopen(ucsv, readdat);
call    0 returned 100%
        -:   61: 
        3:   62:    	if (fp==NULL) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   63:    	{
        -:   64:        	/* Error in file opening */
    #####:   65:        	printf("Can't open file\n");
call    0 never executed
    #####:   66:        	exit(EXIT_FAILURE);
call    0 never executed
        -:   67:    	}
        -:   68:    	else
        -:   69:    	{        
        -:   70:		char buffer[1024];
        3:   71: 		printf("\tUSER ID\t\tUSER NAME\tDESIGNATION\n\t");
call    0 returned 100%
       38:   72:		while (fgets(buffer,1024, fp)) 
call    0 returned 100%
branch  1 taken 92%
branch  2 taken 8% (fallthrough)
        -:   73:		{
       35:   74:		    	char* value = strtok(buffer, ",");
call    0 returned 100%
        -:   75:	 		
      140:   76:		    	while (value) 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   77:		    	{
      105:   78:		        	printf("%-18s", value);
call    0 returned 100%
      105:   79:		        	value = strtok(NULL, ",");
call    0 returned 100%
        -:   80:		    	}
        -:   81:		}
        -:   82:    	}
        3:   83:    	fclose(fp);
call    0 returned 100%
        3:   84:}
        -:   85:
function search_user called 2 returned 100% blocks executed 75%
        2:   86:void search_user(int uid)
        -:   87:{
        2:   88:	int i,find=-1;
        -:   89:	user us[100];
        2:   90:    	int r=0;
        2:   91:    	int rec=0;
        2:   92:	FILE* fp = fopen(ucsv, readdat);
call    0 returned 100%
        2:   93:    	if (fp==NULL) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   94:    	{
        -:   95:        	/* Error in file opening */
    #####:   96:        	printf("Can't open file\n");
call    0 never executed
    #####:   97:        	exit(EXIT_FAILURE);
call    0 never executed
        -:   98:    	}
        -:   99:    		     
        -:  100:	do
        -:  101:	{
       22:  102:	 	r=fscanf(fp,"%d,%[^,],%s\n",&us[rec].user_id, us[rec].user_name,us[rec].designation);
call    0 returned 100%
       22:  103:		if(r == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  104:		{
       22:  105:			rec++;
        -:  106:		} 
        -:  107:		/*printf("%d",r);*/	
      22*:  108:		if(r != 3 && !feof(fp))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  109:		{
    #####:  110:			printf("\nError in Format\n");
call    0 never executed
    #####:  111:			break;
        -:  112:		}
       22:  113:		if(ferror(fp))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  114:		{
    #####:  115:			printf("\nError in Reading\n");
call    0 never executed
    #####:  116:			break;
        -:  117:		}
       22:  118:	}while(!feof(fp));
call    0 returned 100%
branch  1 taken 91%
branch  2 taken 9% (fallthrough)
        -:  119:    	
        2:  120:    	(void)fclose(fp);
call    0 returned 100%
        -:  121:    	
        2:  122:    	printf("\nRecords Read. %d\n",rec);
call    0 returned 100%
        -:  123:    	
       24:  124:    	for(i=0;i<rec;i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  125:    	{
       22:  126:    		if(us[i].user_id==uid)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  127:    		{
        1:  128:    			printf("\nMatch found at position %d",(i+1));
call    0 returned 100%
        1:  129:    			printf("\n\tUSER ID\tUSER NAME\tDESIGNATION\n");
call    0 returned 100%
        1:  130:    			printf("\n\t\%d\t%s\t%s\n", us[i].user_id,us[i].user_name,us[i].designation);
call    0 returned 100%
        1:  131:    			printf("\n");
call    0 returned 100%
        1:  132:    			find++;
        -:  133:    		}
        -:  134:    	}
        2:  135:    	if(find==-1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  136:    	{
        1:  137:    		printf("\nINVALID USER ID\n");
call    0 returned 100%
        -:  138:    	}
        2:  139:}
        -:  140:
function delete_user called 1 returned 100% blocks executed 77%
        1:  141:void delete_user(int uid)
        -:  142:{
        -:  143:	user us[100];
        1:  144:    	int r=0;
        1:  145:    	int rec=0;     
        1:  146:	int find=-1;
        -:  147:	int i;
        -:  148:	
        1:  149:	FILE* fp = fopen(ucsv, readdat);
call    0 returned 100%
        1:  150: 	FILE* fpt = fopen("../data/tempuser.csv", appenddat);
call    0 returned 100%
        -:  151: 	
        1:  152: 	char filename[25]=ucsv;
        1:  153:	char temp_filename[25]="../data/tempuser.csv";
        -:  154: 	
        1:  155:    	if (fp==NULL || fpt==NULL) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  156:    	{
        -:  157:        	/* Error in file opening */
    #####:  158:        	printf("Can't open file\n");
call    0 never executed
    #####:  159:        	exit(EXIT_FAILURE);
call    0 never executed
        -:  160:    	}
        -:  161:
        -:  162:	do
        -:  163:	{
       12:  164:		r=fscanf(fp,"%d,%[^,],%s\n",&us[rec].user_id, us[rec].user_name,us[rec].designation);
call    0 returned 100%
       12:  165:		if(r == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  166:		{
       12:  167:			rec++;
        -:  168:		} 
        -:  169:		/*printf("%d",r);*/	
      12*:  170:		if(r != 3 && !feof(fp))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  171:		{
    #####:  172:			printf("\nError in Format\n");
call    0 never executed
    #####:  173:			break;
        -:  174:		}
       12:  175:		if(ferror(fp))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  176:		{
    #####:  177:			printf("\nError in Reading\n");
call    0 never executed
    #####:  178:			break;
        -:  179:		}
       12:  180:	}while(!feof(fp));
call    0 returned 100%
branch  1 taken 92%
branch  2 taken 8% (fallthrough)
        -:  181:    	
        1:  182:    	printf("\nRecords Read. %d\n",rec);
call    0 returned 100%
       13:  183:    	for(i=0;i<rec;i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  184:    	{
       12:  185:    		if(us[i].user_id==uid)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  186:    		{
        1:  187:    			find=i;
        1:  188:    			printf("%d",find);
call    0 returned 100%
        -:  189:    		}
        -:  190:    	}
        -:  191:    	
       13:  192:    	for(i=0;i<rec;i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  193:    	{
       12:  194:    		if(i!=find)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  195:    		{
       11:  196:    			fprintf(fpt, "%d,%s,%s\n", us[i].user_id, us[i].user_name,us[i].designation );
call    0 returned 100%
        -:  197:    		}
        -:  198:    	}
        -:  199:    	
        1:  200:    	(void)fclose(fp);
call    0 returned 100%
        1:  201:    	(void)fclose(fpt);
call    0 returned 100%
        -:  202:    	
        1:  203:    	(void)remove(filename);
call    0 returned 100%
        1:  204:    	(void)rename(temp_filename,filename);
call    0 returned 100%
        -:  205:    	
        1:  206:    	if(find!=-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  207:    	{
        1:  208:    		printf("\nRECORD DELETED SUCCESSFULLY\n");
call    0 returned 100%
        -:  209:    	}
        -:  210:    	else
        -:  211:    	{
    #####:  212:    		printf("\nINVALID INPUT\n");
call    0 never executed
        -:  213:    	}
        1:  214:}
        -:  215:
function update_user called 1 returned 100% blocks executed 81%
        1:  216:void update_user(int uid)
        -:  217:{
        -:  218:	user us[100];
        1:  219:    	int r=0;
        1:  220:    	int rec=0;     
        1:  221:	int find=-1;
        -:  222:	int i,tuid;
        -:  223:    	char tuname[50];
        -:  224:	char tdes[20];
        -:  225:	
        1:  226:	FILE* fp = fopen(ucsv, readdat);
call    0 returned 100%
        1:  227: 	FILE* fpt = fopen("../data/tempuser.csv", appenddat);
call    0 returned 100%
        -:  228: 	
        1:  229: 	char filename[25]=ucsv;
        1:  230:	char temp_filename[25]="../data/tempuser.csv";
        -:  231: 	
        1:  232:    	if (fp==NULL || fpt==NULL) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  233:    	{
        -:  234:        	/* Error in file opening */
    #####:  235:        	printf("Can't open file\n");
call    0 never executed
    #####:  236:        	exit(EXIT_FAILURE);
call    0 never executed
        -:  237:    	}
        -:  238:    		
        -:  239:	do
        -:  240:	{
       12:  241:		r=fscanf(fp,"%d,%[^,],%s\n",&us[rec].user_id, us[rec].user_name,us[rec].designation);
call    0 returned 100%
       12:  242:		if(r == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  243:		{
       12:  244:			rec++;
        -:  245:		} 
        -:  246:		/*printf("%d",r);*/	
      12*:  247:		if(r != 3 && !feof(fp))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  248:		{
    #####:  249:			printf("\nError in Format\n");
call    0 never executed
    #####:  250:			break;
        -:  251:		}
       12:  252:		if(ferror(fp))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  253:		{
    #####:  254:			printf("\nError in Reading\n");
call    0 never executed
    #####:  255:			break;
        -:  256:		}
       12:  257:	}while(!feof(fp));
call    0 returned 100%
branch  1 taken 92%
branch  2 taken 8% (fallthrough)
        -:  258:    	
        1:  259:    	printf("\nRecords Read. %d\n",rec);
call    0 returned 100%
       13:  260:    	for(i=0;i<rec;i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  261:    	{
       12:  262:    		if(us[i].user_id==uid)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  263:    		{
        1:  264:    			find=i;
        1:  265:    			printf("%d",find);
call    0 returned 100%
        -:  266:    		}
        -:  267:    	}
       13:  268:    	for(i=0;i<rec;i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  269:    	{
       12:  270:    		if(i!=find)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  271:    		{
       11:  272:    			fprintf(fpt, "%d,%s,%s\n", us[i].user_id, us[i].user_name,us[i].designation );
call    0 returned 100%
        -:  273:    		}
       12:  274:    		if(i==find)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  275:    		{
        1:  276:    			printf("\nEnter USER ID\n");
call    0 returned 100%
        1:  277:		    	(void)scanf("%d", &tuid);
call    0 returned 100%
        -:  278:		    
        1:  279:		    	printf("\nEnter USER Name\n");
call    0 returned 100%
        1:  280:		    	(void)scanf("%s", tuname);
call    0 returned 100%
        -:  281:		    
        1:  282:			printf("\nEnter USER DESIGNATION\n");
call    0 returned 100%
        1:  283:		    	(void)scanf("%s", tdes);
call    0 returned 100%
        -:  284:		    	
        1:  285:		    	fprintf(fpt, "%d,%s,%s\n", tuid, tuname, tdes);
call    0 returned 100%
        -:  286:    		}
        -:  287:    	}
        1:  288:    	(void)fclose(fp);
call    0 returned 100%
        1:  289:    	(void)fclose(fpt);
call    0 returned 100%
        -:  290:    	
        1:  291:    	(void)remove(filename);
call    0 returned 100%
        1:  292:    	(void)rename(temp_filename,filename);
call    0 returned 100%
        -:  293:    	
        1:  294:    	if(find!=-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  295:    	{
        1:  296:    		printf("\nRECORD UPDATED SUCCESSFULLY\n");
call    0 returned 100%
        -:  297:    	}
        -:  298:    	else
        -:  299:    	{
    #####:  300:    		printf("\nINVALID INPUT\n");
call    0 never executed
        -:  301:    	}
        1:  302:}
        -:  303:
